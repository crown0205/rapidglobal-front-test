import Button from "@/components/atoms/Button";
import ProductModal from "@/components/molecules/Modal/ProductModal";
import Pagination from "@/components/molecules/Pagination";
import ProductTable from "@/components/molecules/ProductTable";
import { useProducts } from "@/hook/useProducts";
import { Product } from "@dto/product.model.dto";
import clsx from "clsx";
import { Inter } from "next/font/google";
import Head from "next/head";
import { useEffect, useState } from "react";

const inter = Inter({ subsets: ["latin"] });

// IDEA : next를 이용하는 이유에서 빠른 렌더를 하기 위해서는 어떤 방식을 할지 선택
// getServerSideProps
// getStaticProps

export type IOrderBy =
  | "price"
  | "productTitle"
  | "uploadedAt"
  | "viewCount"
  | "none"
  | undefined;

export type Sort = "desc" | "asc" | "none";

export default function Home() {
  // FIXME : 정렬 아이콘 위치 수정하기
  const contentLength = 10;
  const [page, setPage] = useState(1);
  const [orderBy, setOrderBy] = useState<IOrderBy>("none");
  const [sort, setSort] = useState<Sort>("none");
  const [isModalState, setIsModalState] = useState(false);
  const [product, setProduct] = useState<Product | null>(null);

  useEffect(() => {
    if (localStorage.getItem("orderBy")) {
      setOrderBy(localStorage.getItem("orderBy") as IOrderBy);
      setSort(localStorage.getItem("sort") as Sort);
    }
  }, []);

  const { data: productListData, isLoading } = useProducts({
    page,
    orderBy,
    sort,
    contentLength,
  });

  const handleSortSave = () => {
    if (orderBy && orderBy !== "none" && sort !== "none") {
      localStorage.setItem("orderBy", orderBy);
      localStorage.setItem("sort", sort);
    }
  };

  const handleSortReset = () => {
    if (localStorage.getItem("orderBy")) {
      localStorage.removeItem("orderBy");
      localStorage.removeItem("sort");
    }

    if (orderBy !== "none" || sort !== "none") {
      setOrderBy("none");
      setSort("none");
    }
  };

  const buttonData = [
    {
      title: "정렬 기준 저장",
      styles: "bg-slate-500 text-white",
      onclick: handleSortSave,
    },
    {
      title: "초기화",
      styles: "bg-slate-500 text-white",
      onclick: handleSortReset,
    },
  ];

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main
        className={clsx(
          `px-6 py-4 w-full h-full flex flex-col gap-[20px] items-center justify-center`,
          inter.className
        )}
      >
        <div className="flex gap-2 w-[90%] justify-end max-w-">
          {buttonData.map((button) => (
            <Button
              key={button.title}
              size="small"
              style={button.styles}
              onClick={button.onclick}
            >
              {button.title}
            </Button>
          ))}
        </div>

        <ProductTable
          sort={sort}
          setSort={setSort}
          orderBy={orderBy}
          setOrderBy={setOrderBy}
          data={productListData}
          setProduct={setProduct}
          setIsModalState={setIsModalState}
          isLoading={isLoading}
        />

        <Pagination
          productListData={productListData}
          page={page}
          setPage={setPage}
          contentLength={contentLength}
        />

        <ProductModal
          isModalState={isModalState}
          product={product}
          onClose={() => {
            setIsModalState(false);
          }}
        />
      </main>
    </>
  );
}
